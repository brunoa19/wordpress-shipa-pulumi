"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
// Export members:
__export(require("./app"));
__export(require("./appCname"));
__export(require("./appDeploy"));
__export(require("./appEnv"));
__export(require("./cluster"));
__export(require("./framework"));
__export(require("./getApp"));
__export(require("./getApps"));
__export(require("./getFramework"));
__export(require("./getFrameworks"));
__export(require("./networkPolicy"));
__export(require("./permission"));
__export(require("./plan"));
__export(require("./provider"));
__export(require("./role"));
__export(require("./roleAssociation"));
__export(require("./team"));
__export(require("./user"));
__export(require("./volume"));
__export(require("./volumeBind"));
__export(require("./volumePlan"));
// Export sub-modules:
const config = require("./config");
exports.config = config;
const types = require("./types");
exports.types = types;
// Import resources to register:
const app_1 = require("./app");
const appCname_1 = require("./appCname");
const appDeploy_1 = require("./appDeploy");
const appEnv_1 = require("./appEnv");
const cluster_1 = require("./cluster");
const framework_1 = require("./framework");
const networkPolicy_1 = require("./networkPolicy");
const permission_1 = require("./permission");
const plan_1 = require("./plan");
const role_1 = require("./role");
const roleAssociation_1 = require("./roleAssociation");
const team_1 = require("./team");
const user_1 = require("./user");
const volume_1 = require("./volume");
const volumeBind_1 = require("./volumeBind");
const volumePlan_1 = require("./volumePlan");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "shipa:index/app:App":
                return new app_1.App(name, undefined, { urn });
            case "shipa:index/appCname:AppCname":
                return new appCname_1.AppCname(name, undefined, { urn });
            case "shipa:index/appDeploy:AppDeploy":
                return new appDeploy_1.AppDeploy(name, undefined, { urn });
            case "shipa:index/appEnv:AppEnv":
                return new appEnv_1.AppEnv(name, undefined, { urn });
            case "shipa:index/cluster:Cluster":
                return new cluster_1.Cluster(name, undefined, { urn });
            case "shipa:index/framework:Framework":
                return new framework_1.Framework(name, undefined, { urn });
            case "shipa:index/networkPolicy:NetworkPolicy":
                return new networkPolicy_1.NetworkPolicy(name, undefined, { urn });
            case "shipa:index/permission:Permission":
                return new permission_1.Permission(name, undefined, { urn });
            case "shipa:index/plan:Plan":
                return new plan_1.Plan(name, undefined, { urn });
            case "shipa:index/role:Role":
                return new role_1.Role(name, undefined, { urn });
            case "shipa:index/roleAssociation:RoleAssociation":
                return new roleAssociation_1.RoleAssociation(name, undefined, { urn });
            case "shipa:index/team:Team":
                return new team_1.Team(name, undefined, { urn });
            case "shipa:index/user:User":
                return new user_1.User(name, undefined, { urn });
            case "shipa:index/volume:Volume":
                return new volume_1.Volume(name, undefined, { urn });
            case "shipa:index/volumeBind:VolumeBind":
                return new volumeBind_1.VolumeBind(name, undefined, { urn });
            case "shipa:index/volumePlan:VolumePlan":
                return new volumePlan_1.VolumePlan(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("shipa", "index/app", _module);
pulumi.runtime.registerResourceModule("shipa", "index/appCname", _module);
pulumi.runtime.registerResourceModule("shipa", "index/appDeploy", _module);
pulumi.runtime.registerResourceModule("shipa", "index/appEnv", _module);
pulumi.runtime.registerResourceModule("shipa", "index/cluster", _module);
pulumi.runtime.registerResourceModule("shipa", "index/framework", _module);
pulumi.runtime.registerResourceModule("shipa", "index/networkPolicy", _module);
pulumi.runtime.registerResourceModule("shipa", "index/permission", _module);
pulumi.runtime.registerResourceModule("shipa", "index/plan", _module);
pulumi.runtime.registerResourceModule("shipa", "index/role", _module);
pulumi.runtime.registerResourceModule("shipa", "index/roleAssociation", _module);
pulumi.runtime.registerResourceModule("shipa", "index/team", _module);
pulumi.runtime.registerResourceModule("shipa", "index/user", _module);
pulumi.runtime.registerResourceModule("shipa", "index/volume", _module);
pulumi.runtime.registerResourceModule("shipa", "index/volumeBind", _module);
pulumi.runtime.registerResourceModule("shipa", "index/volumePlan", _module);
const provider_1 = require("./provider");
pulumi.runtime.registerResourcePackage("shipa", {
    version: utilities.getVersion(),
    constructProvider: (name, type, urn) => {
        if (type !== "pulumi:providers:shipa") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new provider_1.Provider(name, undefined, { urn });
    },
});
//# sourceMappingURL=index.js.map